openapi: '3.0.3' 

info:
  title: 会員情報取得API 
  version: '1.0'
  description: |
    会員情報取得APIの入出力項目書

    ## リクエスト
    - 文字コード：UTF-8

    ## レスポンス
    - 文字コード：UTF-8
    - HTTPステータス
      - 200
        - 正常
        - application/json で返却
      - 403
        - 認証がNG
      - 460
        - セッションキーがリクエストヘッダーにない
        - セッションキーの形式が不正
      - 403、460は認証モジュールにてレスポンスされる

    ## アプリ認証
      - 事前にアプリ認証基盤から認証情報を取得
      - リクエストヘッダーに上記で取得したセッションキーを設定

servers:
  - url: http://localhost:8080/ap/m/contractInfQuery
    description: 'localhost'

  - url: https://membership-dev.benesse.ne.jp/ap/m/contractInfQuery
    description: '開発環境'

tags:
- name: 会員情報取得

paths:
  /getMemberInf:
    post:
      tags:
        - "会員情報取得"
      summary: '会員情報取得API'
      description: '会員番号から該当会員の情報を取得する'
      parameters:
      - $ref: '#/components/parameters/contentTypeJson'
      - $ref: '#/components/parameters/key'

      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - internalID
              properties:
                internalId:
                  type: string
                  description: 会員番号(10桁/12桁OK)
                  example: "1000000000"
                  pattern: '^\d{10}$|^\d{12}$'
      
      responses:
        '200':
          description: 会員情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                正常時（メールアドレス、電話番号あり）:
                  value:
                    internalID: "1000000000"
                    familyNameKanji: "中村"
                    firstNameKanji: "結城"
                    familyNameKana: "ナカムラ"
                    firstNameKana: "ユウキ"
                    gender: 1
                    birthday: "2010/08/02"
                    phoneNumber: "09088889999"
                    emails: ["hogehoge@gmail.com", "mike@yahoo.co.jp", "yuki@mail.benesse.co.jp"]
                正常時（メールアドレス、電話番号なし）:
                  value:
                    internalID: "1000000000"
                    familyNameKanji: "中村"
                    firstNameKanji: "結城"
                    familyNameKana: "ナカムラ"
                    firstNameKana: "ユウキ"
                    gender: 1
                    birthday: "2010/08/02"
                    emails: []
                異常時:
                  value:
                    errorCode: "E001_001"
                    errorMessage: "会員が存在しません。"

components:
  parameters:
    contentTypeJson:
      in: header
      name: Content-Type
      required: true
      description: Content-Type fixed：application/json
      schema:
        type: string
    key:
      in: header
      name: X-LOCAL-APP-HTTPS-KEY
      required: true
      description: |
        セッションキー
      schema:
        type: string

  schemas:
    Response:
      type: object
      required:
        - internalID
        - familyNameKanji
        - firstNameKanji
        - familyNameKana
        - firstNameKana
        - gender
        - birthday
      properties:
        internalID:
          description: |
            会員番号
            常に10桁で返却する。正常時に返却
          type: string
          pattern: "^d{10}$"
          example: "1000000000"
        familyNameKanji:
          description: 漢字苗字。正常時に返却
          type: string
          example: "中村"
          maxLength: 20
        firstNameKanji:
          description: 漢字名前。正常時に返却
          type: string
          example: "結城"
          maxLength: 20
        familyNameKana:
          description: 仮名苗字。正常時に返却
          type: string
          example: "ナカムラ"
          maxLength: 20
        firstNameKana:
          description: 仮名名前。正常時に返却
          type: string
          example: "ユウキ"
          maxLength: 20
        gender:
          description: |
            性別
            1:男
            2:女
            9:その他　正常時に返却
          type: integer
          example: 1
          pattern: '^[1,2,9]$'
        birthday:
          description: | 
            生年月日
            フォーマットはYYYY/MM/ddとする。正常時に返却
          type: string
          pattern: "^\\d{4}/\\d{2}/\\d{2}$"
          example: "2010/08/02"
        phoneNumber:
          description:  |
            電話番号。存在しない場合はタグなしとする。正常時に返却
          type: string
          example: "09088889999"
          pattern: '^\d{10}$|^\d{11}$'
        emails:
          description: |
            メールアドレスのリスト。複数個存在した場合の順番は保証しない。
            メールアドレスが存在しない場合は、空のリストとする。正常時に返却
          type: array
          items:
            type: string
          example: ["hogehoge@gmail.com", "mike@yahoo.co.jp", "yuki@mail.benesse.co.jp"]
        errorCode:
          type: string
          description: |
            エラーコード。
            別紙エラーコード定義書で定義する。エラー発生時に返却
          example: "E001_001"
        errorMessage:
          type: string
          description: エラーメッセージ。エラー発生時に返却
          example: "会員が存在しません。"